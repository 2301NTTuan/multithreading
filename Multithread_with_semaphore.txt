#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_THREADS 5
#define NUM_INCREMENTS 1000

int shared_variable = 0;
sem_t semaphore;

void *worker_thread(void *arg) {
    int thread_number = *(int *)arg;
    free(arg);

    printf("Thread %d đang thực hiện công việc...\n", thread_number);

    for (int i = 0; i < NUM_INCREMENTS; i++) {
        // Giảm giá trị của Semaphore để kiểm tra tài nguyên có sẵn
        sem_wait(&semaphore);

        // Thực hiện công việc tăng giá trị của shared_variable
        shared_variable++;

        // Tăng giá trị của Semaphore sau khi hoàn thành công việc
        sem_post(&semaphore);
    }

    // Kết thúc thread con
    pthread_exit(NULL);
}

int main() {
    // Khởi tạo Semaphore với số lượng tài nguyên ban đầu là 1
    sem_init(&semaphore, 0, 1);

    pthread_t threads[NUM_THREADS];

    for (int i = 0; i < NUM_THREADS; i++) {
        int *thread_number = malloc(sizeof(int));
        *thread_number = i;
        if (pthread_create(&threads[i], NULL, worker_thread, thread_number) != 0) {
            fprintf(stderr, "Lỗi khi tạo thread %d\n", i);
            exit(1);
        }
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            fprintf(stderr, "Lỗi khi join thread %d\n", i);
            exit(1);
        }
    }

    printf("Kết quả cuối cùng từ biến chung: %d\n", shared_variable);

    // Hủy Semaphore
    sem_destroy(&semaphore);

    return 0;
}
